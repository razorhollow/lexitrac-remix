datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  firstName String?
  lastName  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image     UserImage?
  roles     Role[]
  password  Password?
  notes     Note[]
  jobs      Job[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Job {
  id       String   @id @default(uuid())
  jobNumber Int @unique @default(0) 
  caseName String
  jobDate  DateTime
  dueDate  DateTime
  client   String
  submitted Boolean @default(false)
  closed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reporter User? @relation(fields: [reporterId], references: [id])
  reporterId   String? 
  files JobFile[]

  //non-unique foreign key
  @@index([reporterId])
  //search helper
  @@index([reporterId, updatedAt, createdAt])
}

model JobIndex {
  id String @id @default(uuid())
  index Int @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobFile {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  job   Job   @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  jobId String

  // non-unique foreign key
  @@index([jobId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}
